<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= workout.name %> - Exercises</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 1000px;
      margin: auto;
      padding: 20px;
    }

    h1 {
      text-align: center;
      margin-bottom: 10px;
    }

    .workout-summary {
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 25px;
      text-align: center;
      border: 1px solid #e9ecef;
    }

    .workout-duration {
      font-size: 1.2rem;
      font-weight: bold;
      color: #28a745;
      margin-bottom: 5px;
    }

    .workout-stats {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
      margin-top: 10px;
    }
    
    .workout-stat {
      background: #e9ecef;
      padding: 5px 12px;
      border-radius: 15px;
      font-size: 0.9rem;
      display: inline-block;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 10px;
      vertical-align: middle;
      text-align: left;
    }

    tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    th {
      background-color: #f0f0f0;
    }

    .exercise-actions {
      display: flex;
      gap: 5px;
      flex-wrap: wrap;
    }
    
    .action-btn {
      padding: 5px 8px;
      font-size: 0.8rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      color: white;
    }
    
    .duplicate-btn {
      background-color: #17a2b8;
    }
    
    .rest-btn {
      background-color: #6c757d;
    }
    
    .remove-btn {
      background-color: #dc3545;
    }
    
    .edit-btn {
      background-color: #ffc107;
      color: #212529;
    }
    
    .move-btn {
      background-color: #6610f2;
      cursor: move;
    }
    
      .sets-reps {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .sets-reps input {
      width: 60px;
      padding: 5px;
      border: 1px solid #ced4da;
      border-radius: 4px;
    }
    
    .time-input {
      width: 50px !important;
    }
    
    .reps-container, .time-container {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .type-selector {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .type-label {
      padding: 3px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      cursor: pointer;
    }
    
    .type-label.active {
      background-color: #28a745;
      color: white;
    }

    .breath-container .type-label {
     border: 1px solid #ced4da;
    }
    
    .rest-row {
      background-color: #e2e3e5 !important;
      text-align: center;
      font-style: italic;
    }

    .save-button {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 1rem;
      cursor: pointer;
    }
    
    .save-button:hover {
      background-color: #218838;
    }
    
    .back-btn {
      display: inline-block;
      padding: 12px 24px;
      background-color: #28a745;
      color: white;
      text-decoration: none;
      font-weight: bold;
      border-radius: 6px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      transition: background-color 0.2s ease;
      margin-top: 30px;
    }
    
    .back-btn:hover {
      background-color: #218838;
    }
    
    /* Drag and drop styles */
    .sortable-ghost {
      opacity: 0.5;
      background-color: #c8e6c9 !important;
    }
    
    .sortable-chosen {
      background-color: #e8f5e9 !important;
    }
    
    tr.exercise-row, tr.rest-row {
      transition: background-color 0.2s ease;
    }
    
    tr.exercise-row:hover, tr.rest-row:hover {
      background-color: #f5f5f5;
    }
  </style>
</head>
<body>
  <h1><%= workout.name %></h1>
  
  <div class="workout-summary">
    <div class="workout-duration">
      Total Duration: <span id="total-duration">0</span> minutes
    </div>
    <div class="workout-stats">
      <div class="workout-stat"><%= exercises.length %> Exercises</div>
      <% if (Array.isArray(workout.muscle_group) && workout.muscle_group.length > 0) { %>
        <div class="workout-stat">Focus: <%= formatList(workout.muscle_group) %></div>
      <% } %>
    </div>
  </div>

  <% function formatList(arr) {
    if (Array.isArray(arr)) {
      return arr.map(e => e.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())).join(', ');
    }
    if (typeof arr === 'string') {
      try {
        const parsed = JSON.parse(arr);
        if (Array.isArray(parsed)) {
          return parsed.map(e => e.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())).join(', ');
        }
        return arr.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      } catch (e) {
        return arr.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      }
    }
    return '';
  } %>  

<form id="workout-form" action="/workouts/<%= workout.id %>/update-sequence?_method=PUT" method="POST" enctype="application/x-www-form-urlencoded">
  <table id="workout-table">
    <thead>
      <tr>
        <th style="width: 5%;">Order</th>
        <th style="width: 25%;">Exercise</th>
        <th style="width: 10%;">Type</th>
        <th style="width: 10%;">Sets/Time</th>
        <th style="width: 10%;">Equipment</th>
        <th style="width: 10%;">Muscle Group</th>
        <th style="width: 15%;">Actions</th>
      </tr>
    </thead>
    <tbody id="exercises-tbody">
      <% exercises.forEach((ex, index) => { %>
        <% if (ex.isRest) { %>
          <tr class="rest-row" data-index="<%= index %>">
            <td>
              <input type="hidden" name="exercise_ids[]" value="rest">
              <input type="hidden" name="item_types[]" value="rest">
              <span class="order-num"><%= index + 1 %></span>
            </td>
            <td colspan="2">Rest Period</td>
            <td>
              <div class="sets-reps">
                <input type="number" name="sets[]" value="0" hidden>
                <input type="number" name="reps[]" value="0" hidden>
                <% 
                  let restMinutes = 0;
                  let restSeconds = 0;
                  if (ex.rest_time_seconds) {
                    restMinutes = Math.floor(ex.rest_time_seconds / 60);
                    restSeconds = ex.rest_time_seconds % 60;
                  }
                %>
                <input type="number" name="minutes[]" min="0" value="<%= restMinutes %>" placeholder="Min">
                <span>min</span>
                <input type="number" name="seconds[]" min="0" max="59" value="<%= restSeconds %>" placeholder="Sec">
                <span>sec</span>
              </div>
            </td>
            <td colspan="2"></td>
            <td class="exercise-actions">
              <button type="button" class="action-btn move-btn" title="Drag to Move">↕️</button>
              <button type="button" class="action-btn remove-btn" title="Remove">❌</button>
            </td>
          </tr>
        <% } else { %>
          <tr class="exercise-row" data-id="<%= ex.id %>" data-index="<%= index %>">
            <td>
              <input type="hidden" name="exercise_ids[]" value="<%= ex.id %>">
              <input type="hidden" name="item_types[]" value="exercise">
              <span class="order-num"><%= index + 1 %></span>
            </td>
            <td><a href="/exercises/<%= ex.id %>"><%= ex.title %></a></td>
            <td>
              <div class="type-selector">
                <% 
                  let isTimeType = false;
                  if (ex.minutes > 0 || ex.seconds > 0) {
                    isTimeType = true;
                  }
                  const isBreath = !!ex.breath_type;
                %>
                <label class="type-label <%= !isTimeType ? 'active' : '' %>">
                  <input type="radio" name="exercise_type_<%= index %>" value="reps" <%= !isTimeType ? 'checked' : '' %> class="type-radio">
                  Reps
                </label>
                <label class="type-label <%= isTimeType ? 'active' : '' %>">
                  <input type="radio" name="exercise_type_<%= index %>" value="time" <%= isTimeType ? 'checked' : '' %> class="type-radio">
                  Time
                </label>
                  <label class="type-label <%= ex.breath_type ? 'active' : '' %>">
                  <input type="radio" name="exercise_type_<%= index %>" value="breath" <%= ex.breath_type ? 'checked' : '' %> class="type-radio">
                  Breath
                </label>
              </div>
              <input type="hidden" name="exercise_types[]" class="exercise-type-hidden" value="<%= ex.breath_type ? 'breath' : (isTimeType ? 'time' : 'reps') %>">
            </td>
            <td>
              <div class="sets-reps">
                <input type="number" name="sets[]" min="1" value="<%= ex.sets || 3 %>" placeholder="Sets" style="<%= isBreath ? 'display: none;' : '' %>">
                <span class="separator" style="<%= isBreath ? 'display: none;' : '' %>">×</span>
                <div class="reps-container" style="<%= (isTimeType || isBreath) ? 'display: none;' : '' %>">
                  <input type="number" name="reps[]" min="1" value="<%= isBreath ? 0 : (ex.reps || 10) %>" placeholder="Reps" class="reps-input">
                </div>
                <div class="time-container" style="<%= (!isTimeType || isBreath) ? 'display: none;' : '' %>">
                  <input type="number" name="minutes[]" min="0" value="<%= ex.minutes || 0 %>" placeholder="Min" class="time-input">
                  <span>min</span>
                  <input type="number" name="seconds[]" min="0" value="<%= ex.seconds || 30 %>" placeholder="Sec" class="time-input">
                  <span>sec</span>
                </div>
                <div class="breath-container" style="<%= isBreath ? 'display: flex;' : 'display: none;' %>; gap: 10px;">
                  <label class="type-label <%= ex.breath_type === 'inhale' ? 'active' : '' %>">
                    <input type="radio" name="breath_type[]" value="inhale" <%= ex.breath_type === 'inhale' ? 'checked' : '' %>> Inhale
                  </label>
                  <label class="type-label <%= ex.breath_type === 'exhale' ? 'active' : '' %>">
                    <input type="radio" name="breath_type[]" value="exhale" <%= ex.breath_type === 'exhale' ? 'checked' : '' %>> Exhale
                  </label>
                </div>
              </div>
            </td>
            <td><%= formatList(ex.equipment) %></td>
            <td><%= formatList(ex.muscle_group) %></td>
            <td class="exercise-actions">
              <button type="button" class="action-btn move-btn" title="Drag to Move">↕️</button>
              <button type="button" class="action-btn duplicate-btn" title="Duplicate">🔄</button>
              <button type="button" class="action-btn rest-btn" title="Add Rest After">⏱️</button>
              <button type="button" class="action-btn remove-btn" title="Remove">❌</button>
            </td>
          </tr>
        <% } %>
      <% }) %>
    </tbody>
  </table>


  <button type="submit" class="save-button">Save Workout</button>
</form>

  <div style="text-align: center;">
    <a href="/workouts" class="back-btn">
      ⬅️ Back to Workouts
    </a>
  </div>

  <!-- Include Sortable.js from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const exercisesBody = document.getElementById('exercises-tbody');
      let currentIndex = <%= exercises.length %>;
      
      // Initialize Sortable for drag and drop functionality
      const sortable = new Sortable(exercisesBody, {
        animation: 150,
        handle: '.move-btn',
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        onEnd: function() {
          // Update order numbers after sorting
          updateOrderNumbers();
          // Recalculate duration
          calculateTotalDuration();
        }
      });
      
      // Template for a rest row
      function createRestRow(index) {
        const row = document.createElement('tr');
        row.className = 'rest-row';
        row.dataset.index = index;

        row.innerHTML = `
          <td>
            <input type="hidden" name="exercise_ids[]" value="rest">
            <input type="hidden" name="item_types[]" value="rest">
            <span class="order-num">${index + 1}</span>
          </td>
          <td colspan="2">Rest Period</td>
          <td>
            <div class="sets-reps">
              <input type="number" name="sets[]" value="0" hidden>
              <input type="number" name="reps[]" value="0" hidden>
              <input type="number" name="minutes[]" min="0" value="1" placeholder="Min">
              <span>min</span>
              <input type="number" name="seconds[]" min="0" max="59" value="0" placeholder="Sec">
              <span>sec</span>
            </div>
          </td>
          <td colspan="2"></td>
          <td class="exercise-actions">
            <button type="button" class="action-btn move-btn" title="Drag to Move">↕️</button>
            <button type="button" class="action-btn remove-btn" title="Remove">❌</button>
          </td>
        `;

        return row;
      }
      
      // Duplicate an exercise row
      function duplicateExercise(row) {
        const newRow = row.cloneNode(true);
        currentIndex++;
        newRow.dataset.index = currentIndex;
        
        // Update name attributes for the new row
        const typeRadios = newRow.querySelectorAll('.type-radio');
        typeRadios.forEach(radio => {
          radio.name = `exercise_type_${currentIndex}`;
        });
        
        // Add event listeners to the new row buttons
        addRowEventListeners(newRow);
        
        // Insert after the current row
        row.after(newRow);
        
        // Update order numbers
        updateOrderNumbers();
        calculateTotalDuration();
      }
      
      // Add a rest period after an exercise
      function addRestAfter(row) {
        currentIndex++;
        const restRow = createRestRow(currentIndex);
        
        // Add event listeners to the rest row
        addRestRowEventListeners(restRow);
        
        // Insert after the current row
        row.after(restRow);
        
        // Update order numbers
        updateOrderNumbers();
        calculateTotalDuration();
      }
      
      // Remove a row
      function removeRow(row) {
        if (confirm('Are you sure you want to remove this item from the workout?')) {
          row.remove();
          updateOrderNumbers();
          calculateTotalDuration();
        }
      }
      
      // Update order numbers for all rows
      function updateOrderNumbers() {
        const allRows = exercisesBody.querySelectorAll('tr');
        allRows.forEach((row, idx) => {
          row.querySelector('.order-num').textContent = idx + 1;
          row.dataset.index = idx;
        });
      }
      
      // Calculate estimated workout duration
      function calculateTotalDuration() {
        let totalMinutes = 0;
        
        // Process all rows
        const allRows = exercisesBody.querySelectorAll('tr');
        allRows.forEach(row => {
          if (row.classList.contains('rest-row')) {
            // Rest period
            const minutes = parseInt(row.querySelector('input[name="minutes[]"]').value) || 0;
            const seconds = parseInt(row.querySelector('input[name="seconds[]"]').value) || 0;
            totalMinutes += minutes + (seconds / 60);
          } else {
            // Exercise
            const sets = parseInt(row.querySelector('input[name="sets[]"]').value) || 0;
            const typeInputs = row.querySelectorAll('.type-radio');
            let isTimeType = false;
            
            // Breath
            const breathContainer = row.querySelector('.breath-container');

            typeInputs.forEach(input => {
              if (input.value === 'time' && input.checked) {
                isTimeType = true;
              }
            });
            
            if (isTimeType) {
              // Time-based exercise
              const minutes = parseInt(row.querySelector('input[name="minutes[]"]').value) || 0;
              const seconds = parseInt(row.querySelector('input[name="seconds[]"]').value) || 0;
              const timeInMinutes = minutes + (seconds / 60);
              totalMinutes += sets * timeInMinutes;
            } else {
              // Rep-based exercise (estimate 45 seconds per set)
              totalMinutes += sets * 0.75;
            }
            
            // Add rest between sets (assume 30 seconds between sets)
            if (sets > 1) {
              totalMinutes += (sets - 1) * 0.5;
            }
          }
        });
        
        // Update the displayed duration (round to 1 decimal)
        document.getElementById('total-duration').textContent = totalMinutes.toFixed(1);
      }
      
      // Add event listeners to all exercise rows
      function addRowEventListeners(row) {
        // Duplicate button
        const duplicateBtn = row.querySelector('.duplicate-btn');
        if (duplicateBtn) {
          duplicateBtn.addEventListener('click', function() {
            duplicateExercise(row);
          });
        }
        
        // Rest button
        const restBtn = row.querySelector('.rest-btn');
        if (restBtn) {
          restBtn.addEventListener('click', function() {
            addRestAfter(row);
          });
        }
        
        // Remove button
        row.querySelector('.remove-btn').addEventListener('click', function() {
          removeRow(row);
        });
        
        // Type selector (reps vs time)
        const typeLabels = row.querySelectorAll('.type-label');
        typeLabels.forEach(label => {
          // Remove any existing listeners first to prevent duplicates
          label.removeEventListener('click', typeClickHandler);
          // Add new click handler
          label.addEventListener('click', typeClickHandler);
        });

        // Gestione stile attivo per Inhale/Exhale
        const breathRadios = row.querySelectorAll('.breath-container input[type="radio"]');
        const breathLabels = row.querySelectorAll('.breath-container .type-label');
        breathRadios.forEach(radio => {
          radio.addEventListener('change', function () {
            breathLabels.forEach(l => l.classList.remove('active'));
            this.parentElement.classList.add('active');
          });
        });
        
        // Separate function so we can remove and re-add it
          function typeClickHandler() {
          const radio = this.querySelector('.type-radio');
          if (radio) {
            radio.checked = true;

            const hiddenInput = row.querySelector('.exercise-type-hidden');
            if (hiddenInput) hiddenInput.value = radio.value;

            const repsContainer = row.querySelector('.reps-container');
            const timeContainer = row.querySelector('.time-container');
            const breathContainer = row.querySelector('.breath-container');
            const setsInput = row.querySelector('input[name="sets[]"]');
            const separator = row.querySelector('.separator');

            if (radio.value === 'time') {
              repsContainer.style.display = 'none';
              timeContainer.style.display = 'flex';
              breathContainer.style.display = 'none';
              if (setsInput) setsInput.style.display = 'none';
              if (separator) separator.style.display = 'none';

            } else if (radio.value === 'reps') {
              repsContainer.style.display = 'flex';
              timeContainer.style.display = 'none';
              breathContainer.style.display = 'none';
              if (setsInput) setsInput.style.display = '';
              if (separator) separator.style.display = '';

            } else if (radio.value === 'breath') {
              repsContainer.style.display = 'none';
              timeContainer.style.display = 'none';
              breathContainer.style.display = 'flex';
              if (setsInput) setsInput.style.display = 'none';
              if (separator) separator.style.display = 'none';
            }

            calculateTotalDuration();
          }
        }

        
        // Recalculate when sets or reps change
        const countInputs = row.querySelectorAll('input[type="number"]');
        countInputs.forEach(input => {
          input.addEventListener('change', calculateTotalDuration);
          input.addEventListener('input', calculateTotalDuration);
        });
      }
      
      // Add event listeners for rest rows
      function addRestRowEventListeners(row) {
        // Remove button
        row.querySelector('.remove-btn').addEventListener('click', function() {
          removeRow(row);
        });
        
        // Recalculate when rest time changes
        const timeInputs = row.querySelectorAll('input[type="number"]');
        timeInputs.forEach(input => {
          input.addEventListener('change', calculateTotalDuration);
          input.addEventListener('input', calculateTotalDuration);
        });
      }
      
      // Initialize event listeners for all existing rows
      document.querySelectorAll('.exercise-row').forEach(row => {
        addRowEventListeners(row);
        
        // Also manually set up the existing type selectors
        const typeLabels = row.querySelectorAll('.type-label');
        typeLabels.forEach(label => {
          const radio = label.querySelector('.type-radio');
          if (radio && radio.checked) {
            label.classList.add('active');
            
            // Initialize the correct display of inputs
            if (radio.value === 'time') {
              const repsContainer = row.querySelector('.reps-container');
              const timeContainer = row.querySelector('.time-container');
              if (repsContainer) repsContainer.style.display = 'none';
              if (timeContainer) timeContainer.style.display = 'flex';
            } else {
              const repsContainer = row.querySelector('.reps-container');
              const timeContainer = row.querySelector('.time-container');
              if (repsContainer) repsContainer.style.display = 'flex';
              if (timeContainer) timeContainer.style.display = 'none';
            }
          } else {
            label.classList.remove('active');
          }
        });
      });
      
      // Initialize event listeners for all existing rest rows
      document.querySelectorAll('.rest-row').forEach(row => {
        addRestRowEventListeners(row);
      });
      
      // Initial duration calculation
      calculateTotalDuration();
      
      // Ensure the form submits correctly by updating all hidden fields
      document.getElementById('workout-form').addEventListener('submit', function(e) {
        console.log('Form is submitting...');
        
        // Make sure all exercise_types hidden inputs are correctly set based on radio button state
        document.querySelectorAll('.exercise-row').forEach(row => {
          const typeRadios = row.querySelectorAll('.type-radio');
          let selectedType = 'reps'; // Default
          
          typeRadios.forEach(radio => {
            if (radio.checked) {
              selectedType = radio.value;
            }
          });
          
          const hiddenTypeInput = row.querySelector('.exercise-type-hidden');
          if (hiddenTypeInput) {
            hiddenTypeInput.value = selectedType;
          }
        });
      });
    });
  </script>
</body>
</html>